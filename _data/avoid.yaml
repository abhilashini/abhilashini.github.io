- heading: "Refactor with intent, not haste"
  text: >-
    Rewriting code on impulse risks breaking what users rely on. 
    Even flawed systems have hidden purpose. Refactor only 
    after tests safeguard needs and plans ensure continuity.
  icon: "fas fa-sync-alt"
- heading: "Code with vision, not velocity"
  text: >-
    Clarity on requirements builds reusability, not just deliverables. 
    Prioritize “plug and play” systems over “patch and pray” fixes.
  icon: "fas fa-binoculars"
- heading: "Code Traces User Journeys"
  text: >-
    If a code change doesn’t trace to a user flow or data-driven need, 
    it’s noise. Codebases thrive when they document **why** they exist,
    not just **how** they work. Code should be a map, not a maze.
  icon: "fas fa-map"
- heading: "Code to Context, Not Frameworks"
  text: >-
    Frameworks and algorithms solve narrow problems. When they warp a 
    product’s design, users inherit their quirks. Bend tools to user 
    needs, never the reverse.
  code: |
    def format_name(user_input, user_locale):  
      # Let users define their own rules, not frameworks  
      if user_locale == "jp":  
          return f"{user_input.last_name} {user_input.first_name}"  
      else:  
          return f"{user_input.first_name} {user_input.last_name}"
  language: "python"
  icon: "fas fa-tools"
- heading: "Maintainability isn’t optional"
  text: >-
    When a system’s errors confuses developers, they confuse users too. 
    Maintainability begins with empathy — for our future selves, users 
    and inheriting developers. Include self-diagnosing loggers, 
    actionable alerts, structured errors and tests to turn debugging 
    from scavenger hunts into guided fixes.
  icon: "fas fa-stethoscope"