- heading: "With great power, comes ~~great responsibility~~ messy code"
  text: >-
    Servers tolerate inefficient code today, but developers shouldn't. 
    Verbose code might run faster with modern hardware, 
    but slows down the humans maintaining it.
    [TK] Good code communicates intent unambiguously. [TK]
  icon: "fas fa-feather-alt"

- heading: "SOS from SOS [TK]"
  text: >-
    A 10-line script often outlives 500 lines of "modern" boilerplate. 
    New tools aren't inherently better: they're better only if 
    they solve a problem the team or users actually face.
  icon: "fas fa-shiny-alt"

- heading: "Anyone can code ≠ Everyone should"
  text: >-
    Quick scripts work for personal use. In shared systems, hacky code 
    becomes technical debt. Code is a collaborative artifact, 
    not a personal scratchpad.

- heading: "Redesign where needed but not to be trendy"
  text: >-
    UX should be user-centric, not aesthetic. If users don’t struggle 
    with the old UI, “modernizing” it is theater. Redesign when 
    user feedback proves the current design fails. 
    Otherwise, focus on incremental tweaks, not overhauls.

- heading: "Design for structure, not content"
  text: >-
    A grid showing fruits or financials should work the same way. 
    Code shouldn’t care what the data is — only how it’s structured. 
    The meta-structure, not the content, defines simplicity.

- heading: "Tests prevent silent failures"
  text: >-
    Tests mean more code, but they simplify debugging. 
    They break loudly when edge cases emerge. 
    No tests mean silent corruption and chaos for future work.

- heading: "Universal programming"
  text: >-
    Universal grammar and shared design patterns underpin all software development.
    This transcends silo-ed tech stacks. This core understanding allows 
    developers to move between different technologies more effectively.